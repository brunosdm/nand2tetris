// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Muxes
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=instrmux);
    Mux16(a=outA, b=inM, sel=instruction[12], out=memorymux);

    // A Register
    Not(in=instruction[15], out=i15not);
    Or(a=i15not, b=instruction[5], out=loadA);
    ARegister(in=instrmux, load=loadA, out=outA, out[0..14]=addressM);

    // D Register
    And(a=instruction[4], b=instruction[15], out=loadD);
    DRegister(in=aluout, load=loadD, out=outD);

    // ALU
    ALU(x=outD, y=memorymux, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], ng=ng, zr=zr, out=aluout, out=outM);

    // PC
    DMux8Way(in=true, sel=instruction[0..2], a=nojmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);

        // JGT
    And(a=notng, b=notzr, out=zrng0);
    And(a=zrng0, b=jgt, out=andjgt);

        // JEQ
    And(a=zr, b=jeq, out=andjeq);

        // JGE
    Or(a=zr, b=notng, out=orjge);
    And(a=orjge, b=jge, out=andjge);

        // JLT
    And(a=ng, b=jlt, out=andjlt);

        // JNE
    And(a=notzr, b=jne, out=andjne);

        // JLE
    Or(a=zr, b=ng, out=orjle);
    And(a=orjle, b=jle, out=andjle);

    Or8Way(in[0]=andjgt, in[1]=andjeq, in[2]=andjge, in[3]=andjlt, in[4]=andjne, in[5]=andjle, in[6]=jmp, in[7]=jmp, out=orPC);
    And(a=instruction[15], b=orPC, out=loadPC);

    PC(in=outA, reset=reset, inc=true, load=loadPC, out[0..14]=pc);
}